from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, FSInputFile
from keyboards.inline import get_main_menu, get_gender_keyboard, get_help_back_keyboard, get_medcard_keyboard,get_dates_keyboard,get_times_keyboard,get_doctors_keyboard
from db_handler.db import (
    check_auth,
    register_user,
    get_doctors,
    generate_available_times,
    generate_available_dates,
    create_appointment,
    get_doctor_info,
    get_doctors_by_specialization,
    get_user_diagnoses,
    get_doctor_data,
    get_last_appointment,
    get_user_data,
    get_last_diagnosis,
    get_user_appointments
)
from keyboards.reply import get_menu_reply_keyboard
from utils import get_user_data, get_last_appointment, get_doctor_data
from model import get_doctor, predict_intent, get_date

from docx import Document
from docx2pdf import convert
from datetime import datetime
import os
import logging

router = Router()

OUTPUT_DIR = "output"
os.makedirs(OUTPUT_DIR, exist_ok=True)
logger = logging.getLogger(__name__)
user_data = {}


class CertificateData:
    def __init__(self):
        self.user_id = None
        self.full_name = None
        self.birth_date = None
        self.diagnosis = None
        self.start_date = None
        self.end_date = None
        self.doctor_id = None
        self.doctor_name = None
        self.clinic_name = "–†–∞–∑—É–º–µ–¥"
        self.waiting_for = None


class AppointmentStates(StatesGroup):
    waiting_for_doctor = State()
    waiting_for_date = State()
    waiting_for_time = State()


class RegistrationStates(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_gender = State()
    waiting_for_birth_date = State()
    waiting_for_phone = State()


class RecommendationStates(StatesGroup):
    waiting_for_symptoms = State()


class MenuState(StatesGroup):
    waiting_for_input = State()


class CertificateStates(StatesGroup):
    waiting_for_start_date = State()
    waiting_for_end_date = State()


def is_valid_date(date_str: str) -> bool:
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False


def is_date_before(date_str1: str, date_str2: str) -> bool:
    try:
        d1 = datetime.strptime(date_str1, "%d.%m.%Y")
        d2 = datetime.strptime(date_str2, "%d.%m.%Y")
        return d1 <= d2
    except ValueError:
        return False


def is_current_year(date_str: str) -> bool:
    try:
        date = datetime.strptime(date_str, "%d.%m.%Y")
        return date.year == datetime.now().year
    except ValueError:
        return False


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)

    if check_auth(user_id):
        await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_menu_reply_keyboard()
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=get_menu_reply_keyboard())
        await state.set_state(RegistrationStates.waiting_for_first_name)


@router.message(RegistrationStates.waiting_for_first_name)
async def process_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegistrationStates.waiting_for_last_name)


@router.message(RegistrationStates.waiting_for_last_name)
async def process_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=get_gender_keyboard())
    await state.set_state(RegistrationStates.waiting_for_gender)


@router.callback_query(RegistrationStates.waiting_for_gender)
async def process_gender(callback: types.CallbackQuery, state: FSMContext):
    gender = '–ú' if callback.data == 'gender_male' else '–ñ'
    await state.update_data(gender=gender)
    await callback.message.edit_text(f"–ü–æ–ª: {gender}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(RegistrationStates.waiting_for_birth_date)


@router.message(RegistrationStates.waiting_for_birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    birth_date = message.text.strip()

    if not is_valid_date(birth_date):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    await state.update_data(birth_date=birth_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RegistrationStates.waiting_for_phone)


@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user = message.from_user

    success = register_user(
        tg_id=str(user.id),
        username=user.username,
        first_name=user_data['first_name'],
        last_name=user_data['last_name'],
        gender=user_data['gender'],
        phone=message.text,
        birth_date=user_data['birth_date']
    )

    if success:
        await state.clear()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=get_menu_reply_keyboard()
        )
        await state.set_state(MenuState.waiting_for_input)
        await message.answer("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    else:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data == "main_menu")
async def process_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(MenuState.waiting_for_input)
    await callback.message.answer(
        "üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )


@router.message(lambda msg: msg.text == "–ú–µ–Ω—é")
async def handle_menu_button(message: types.Message, state: FSMContext):
    await state.set_state(MenuState.waiting_for_input)
    await message.answer(
        "üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )


@router.message(MenuState.waiting_for_input)
async def main_menu_text_handler(message: types.Message, state: FSMContext):
    intent = predict_intent(message.text)

    if intent == "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è":
        await ask_for_symptoms(message, state)

    elif intent == "–∑–∞–ø–∏—Å—å":
        await handler_appointment(message, state)

    elif intent == '–æ—Å—Ç–∞–≤–∏—Ç—å_–æ—Ç–∑—ã–≤':
        pass
        # await —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞

    elif intent == '—á–∏—Ç–∞—Ç—å_–æ—Ç–∑—ã–≤':
        pass
        # await —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤

    elif intent == "—Å–ø—Ä–∞–≤–∫–∞":
        tg_id = str(message.from_user.id)
        data = user_data.get(tg_id)
        if not data:
            await start_certificate_process(message, state)
            return
        await ask_for_symptoms(message, state)

    elif intent == '–ø—Ä–æ—Ñ–∏–ª—å':
        await handle_medcard_profile(message, state)

    elif intent == '–ø—Ä–∏–µ–º—ã':
        await handle_medcard_appointments(message, state)

    elif intent == '–¥–∏–∞–≥–Ω–æ–∑—ã':
        await handle_medcard_diagnoses(message, state)

    elif intent == '–≥—Ä–∞—Ñ–∏–∫':
        await message.answer(
            "üïí *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:*\n\n"
            "üìÖ *–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äì –ü—è—Ç–Ω–∏—Ü–∞:* 07:30 ‚Äì 20:00\n"
            "üìÖ *–°—É–±–±–æ—Ç–∞:* 08:00 ‚Äì 17:00\n"
            "üìÖ *–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:* 08:00 ‚Äì 15:00\n\n"
            "üîπ *–ì—Ä–∞—Ñ–∏–∫ –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏* ‚Äî —É—Ç–æ—á–Ω—è–π—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ.\n"
            "‚õî *–ù–æ—á–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞ –Ω–µ—Ç.*",
            parse_mode="Markdown"
        )

    elif intent == '–∞–¥—Ä–µ—Å–∞':
        await message.answer(
            "üè• *–ù–∞—à–∏ —Ñ–∏–ª–∏–∞–ª—ã:*\n\n"
            "üìç —É–ª. –Æ. –§—É—á–∏–∫–∞, 53–∞\n"
            "üìç —É–ª. –ê–∫. –ì–ª—É—à–∫–æ, –¥. 15–∞\n"
            "üìç —É–ª. –ë–µ–ª–æ–º–æ—Ä—Å–∫–∞—è, –¥. 6",
            parse_mode="Markdown"
        )

    elif intent == '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏':
        await message.answer(
            "üè• –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n"
            "‚Ä¢ –ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –ì–µ–º–∞—Ç–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –î–µ—Ä–º–∞—Ç–æ–≤–µ–Ω–µ—Ä–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –ú–∞–º–º–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –ù–µ–≤—Ä–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –û—Ç–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –ü—Ä–æ–∫—Ç–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—è\n"
            "‚Ä¢ –°–æ—Å—É–¥–∏—Å—Ç–∞—è —Ö–∏—Ä—É—Ä–≥–∏—è\n"
            "‚Ä¢ –£—Ä–æ–ª–æ–≥–∏—è\n"
            "‚Ä¢ –•–∏—Ä—É—Ä–≥–∏—è\n"
            "‚Ä¢ –≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏—è",
            parse_mode="Markdown"
        )

    elif intent == '–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        await message.answer(
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç "
            "‚Äî @fliwoll. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!",
            parse_mode="Markdown"
        )

    elif intent == '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª':
        await handler_help(message, state)

    else:
        await message.answer(
            "‚ùì –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é "
            "—Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –∏–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: "
            "@fliwoll. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!"
        )


# –ë–õ–û–ö –ó–ê–ü–ò–°–¨ –ù–ê –ü–†–ò–ï–ú
@router.callback_query(lambda c: c.data == "appointment")
async def start_appointment(callback: types.CallbackQuery, state: FSMContext):
    await handler_appointment(callback.message, state)


async def handler_appointment(message: types.Message, state: FSMContext):
    await state.clear()
    doctors = get_doctors()
    if not doctors:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–∞—á–µ–π –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:",
        reply_markup=get_doctors_keyboard(doctors)
    )
    await state.set_state(AppointmentStates.waiting_for_doctor)


@router.callback_query(AppointmentStates.waiting_for_doctor, lambda c: c.data.startswith("doctor_"))
async def process_doctor_selection(callback: types.CallbackQuery, state: FSMContext):
    doctor_id = int(callback.data.split("_")[1])
    await state.update_data(doctor_id=doctor_id)

    available_dates = generate_available_dates(doctor_id)
    if not available_dates:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ —ç—Ç–æ–º—É –≤—Ä–∞—á—É.")
        await state.clear()
        return

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞:",
        reply_markup=get_dates_keyboard(available_dates)
    )
    await state.set_state(AppointmentStates.waiting_for_date)
    await callback.answer()

@router.callback_query(AppointmentStates.waiting_for_date, lambda c: c.data.startswith("date_"))
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    date_str = callback.data.split("_")[1]
    data = await state.get_data()
    doctor_id = data['doctor_id']

    try:
        selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
        await state.clear()
        return

    available_times = generate_available_times(doctor_id, selected_date)
    if not available_times:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
        await state.clear()
        return

    await state.update_data(date=date_str)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:",
        reply_markup=get_times_keyboard([time.strftime("%H:%M") for time in available_times])
    )
    await state.set_state(AppointmentStates.waiting_for_time)
    await callback.answer()


@router.callback_query(AppointmentStates.waiting_for_time, lambda c: c.data.startswith("time_"))
async def process_time_selection(callback: types.CallbackQuery, state: FSMContext):
    time_str = callback.data.split("_")[1]
    data = await state.get_data()

    try:
        doctor_id = data['doctor_id']
        date_str = data['date']
        tg_id = callback.from_user.id

        if create_appointment(tg_id, doctor_id, date_str, time_str):
            doctor_info = get_doctor_info(doctor_id)
            if doctor_info:
                doctor_name = f"{doctor_info['first_name']} {doctor_info['last_name']} ({doctor_info['specialization']})"
            else:
                doctor_name = "–≤—Ä–∞—á—É"

            confirmation_message = (
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º!\n\n"
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}\n"
                f"üìÖ –î–∞—Ç–∞: {date_str.replace('-', '.')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time_str}\n\n"
                f"–ñ–¥–µ–º –≤–∞—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
            )

            await callback.message.answer(confirmation_message)
        else:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        print(f"Error processing time selection: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        await state.clear()
        await callback.answer()


# –ë–õ–û–ö –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
@router.callback_query(lambda c: c.data == "recommendation")
async def start_recommendation(callback: types.CallbackQuery, state: FSMContext):
    await ask_for_symptoms(callback.message, state)


async def ask_for_symptoms(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã:")
    await state.set_state(RecommendationStates.waiting_for_symptoms)


@router.message(RecommendationStates.waiting_for_symptoms)
async def process_symptoms(message: types.Message, state: FSMContext):
    symptoms = message.text
    if not symptoms or not isinstance(symptoms, str):
        await message.answer("–û—à–∏–±–∫–∞: –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.")
        return

    doctor_specialization = get_doctor(symptoms)
    await state.update_data(predicted_doctor=doctor_specialization)

    doctors = get_doctors_by_specialization(doctor_specialization)

    if doctors:
        text = (
            f"–°–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º —Å–∏–º–ø—Ç–æ–º–∞–º: {symptoms}\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: *{doctor_specialization}*.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –æ–¥–Ω–æ–º—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for doctor in doctors:
            doctor_id, first_name, last_name, spec = doctor
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{first_name} {last_name} ({spec})",
                    callback_data=f"rec_doctor_{doctor_id}"
                )
            ])

        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ])

        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            f"–°–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º —Å–∏–º–ø—Ç–æ–º–∞–º: {symptoms}\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: *{doctor_specialization}*.\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.",
            parse_mode="Markdown"
        )

    await state.clear()


@router.callback_query(lambda c: c.data.startswith("rec_doctor_"))
async def process_recommended_doctor(callback: types.CallbackQuery, state: FSMContext):
    doctor_id = int(callback.data.split("_")[2])
    await state.update_data(doctor_id=doctor_id)

    available_dates = generate_available_dates(doctor_id)
    if not available_dates:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ —ç—Ç–æ–º—É –≤—Ä–∞—á—É.")
        await state.clear()
        return

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞:",
        reply_markup=get_dates_keyboard(available_dates)
    )
    await state.set_state(AppointmentStates.waiting_for_date)
    await callback.answer()


# –ë–õ–û–ö –ú–ï–î–ö–ê–†–¢–´
@router.callback_query(lambda c: c.data == "medical_card")
async def process_help_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",
        reply_markup=get_medcard_keyboard()
    )


@router.callback_query(lambda c: c.data == "medcard_profile")
async def start_medcard_profile(callback: types.CallbackQuery, state: FSMContext):
    await handle_medcard_profile(callback, state)


async def handle_medcard_profile(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    tg_id = str(callback.from_user.id)

    user = get_user_data(tg_id)
    if not user:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"–ò–º—è: {user['first_name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {user['last_name']}\n"
        f"–ü–æ–ª: {user['gender']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('birth_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
    )
    await callback.message.answer(text)


@router.callback_query(lambda c: c.data == "medcard_appointments")
async def start_medcard_appointments(callback: types.CallbackQuery, state: FSMContext):
    await handle_medcard_appointments(callback, state)


async def handle_medcard_appointments(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    tg_id = str(callback.from_user.id)
    user = get_user_data(tg_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    appointments = get_user_appointments(user['user_id'])
    if not appointments:
        await callback.answer()
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤.")
        return

    text = "üìÖ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–µ–º—ã:\n\n"
    for appt in appointments:
        text += (
            f"–î–∞—Ç–∞: {appt['date']}\n"
            f"–í—Ä–µ–º—è: {appt['time']}\n"
            f"–í—Ä–∞—á: {appt['doctor_name']}\n"
            f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {appt['specialization']}\n\n"
        )

    await callback.answer()
    await callback.message.answer(text)


@router.callback_query(lambda c: c.data == "medcard_diagnoses")
async def start_medcard_diagnoses(callback: types.CallbackQuery, state: FSMContext):
    await handle_medcard_diagnoses(callback, state)


async def handle_medcard_diagnoses(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    tg_id = str(callback.from_user.id)
    user = get_user_data(tg_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    diagnoses = get_user_diagnoses(user['user_id'])
    if not diagnoses:
        await callback.answer()
        await callback.message.answer("–î–∏–∞–≥–Ω–æ–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = "üíä –í–∞—à–∏ –¥–∏–∞–≥–Ω–æ–∑—ã:\n\n"
    for diagnosis in diagnoses:
        text += f"{diagnosis['name']} - {diagnosis['date']}\n"

    await callback.answer()
    await callback.message.answer(text)



# –ë–õ–û–ö –°–ü–†–ê–í–ö–ò


@router.callback_query(lambda c: c.data == "reference")
async def start_certificate(callback: types.CallbackQuery, state: FSMContext):
    await process_certificate_start(callback, state)
    await callback.answer()


async def process_certificate_start(callback: types.CallbackQuery, state: FSMContext):
    tg_id = str(callback.from_user.id)
    user = get_user_data(tg_id)

    if not user:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    #last_diagnosis = get_last_diagnosis(user['user_id'])
    last_diagnosis = {'name':'–û–†–í–ò', 'date': '07.06.2025'}
    if not last_diagnosis:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤.")
        return

    await state.update_data(
        user_id=user['user_id'],
        full_name=f"{user['first_name']} {user['last_name']}",
        birth_date=user.get('birth_date'),
        diagnosis=last_diagnosis['name'],
        diagnosis_date=last_diagnosis['date']
    )

    last_appointment = get_last_appointment(user['user_id'])
    if last_appointment:
        doctor = get_doctor_data(last_appointment['doctor_id'])
        if doctor:
            await state.update_data(
                doctor_name=f"{doctor['first_name']} {doctor['last_name']}"
            )

    await callback.answer(
        f"–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–≥–Ω–æ–∑: {last_diagnosis['name']} (–æ—Ç {last_diagnosis['date']})\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–∑–Ω–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):"
    )
    await state.set_state(CertificateStates.waiting_for_start_date)


@router.message(CertificateStates.waiting_for_start_date)
async def process_start_date(message: types.Message, state: FSMContext):
    date_str = message.text.strip()

    if not is_valid_date(date_str):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    if not is_current_year(date_str):
        await message.answer(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ {datetime.now().year} –≥–æ–¥—É.")
        return

    await state.update_data(start_date=date_str)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ–ª–µ–∑–Ω–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(CertificateStates.waiting_for_end_date)


@router.message(CertificateStates.waiting_for_end_date)
async def process_end_date(message: types.Message, state: FSMContext):
    data = await state.get_data()
    end_date_str = message.text.strip()

    if not is_valid_date(end_date_str):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    if not is_current_year(end_date_str):
        await message.answer(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ {datetime.now().year} –≥–æ–¥—É.")
        return

    if not is_date_before(data['start_date'], end_date_str):
        await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")
        return

    await state.update_data(end_date=end_date_str)
    await generate_certificate(message, await state.get_data())
    await state.clear()


async def generate_certificate(message: types.Message, data: dict):
    tg_id = str(message.from_user.id)
    docx_path = os.path.join(OUTPUT_DIR, f"certificate_{tg_id}.docx")
    pdf_path = os.path.join(OUTPUT_DIR, f"certificate_{tg_id}.pdf")

    doc = Document()
    doc.add_heading("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞", level=1)
    doc.add_paragraph(f"–í—ã–¥–∞–Ω–∞: {data['full_name']}")
    doc.add_paragraph(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}")
    doc.add_paragraph(f"–î–∏–∞–≥–Ω–æ–∑: {data['diagnosis']}")
    doc.add_paragraph(f"–ü–µ—Ä–∏–æ–¥ –±–æ–ª–µ–∑–Ω–∏: —Å {data['start_date']} –ø–æ {data['end_date']}")
    doc.add_paragraph("–°–ø—Ä–∞–≤–∫–∞ –≤—ã–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.")
    doc.add_paragraph(f"–í—Ä–∞—á: {data.get('doctor_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    doc.add_paragraph(f"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ: –†–∞–∑—É–º–µ–¥")
    doc.add_paragraph(f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {datetime.now().strftime('%d.%m.%Y')}")

    doc.save(docx_path)
    convert(docx_path, pdf_path)

    await message.answer("–í–∞—à–∞ —Å–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–∞!")
    await message.answer_document(FSInputFile(pdf_path))
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    os.remove(docx_path)
    os.remove(pdf_path)


@router.message()
async def handler_certificate(message: types.Message, state: FSMContext):
    tg_id = str(message.from_user.id)
    data = user_data.get(tg_id)
    if not data:
        await process_certificate_start(message, state)
        return

    text = message.text.strip()

    if data.waiting_for == 'start_date':
        text = get_date(text)
        if not is_valid_date(text):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
            return
        if not is_current_year(text):
            await message.answer(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ {datetime.now().year} –≥–æ–¥—É.")
            return
        data.start_date = text
        data.waiting_for = 'end_date'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ–ª–µ–∑–Ω–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardRemove())
        return

    if data.waiting_for == 'end_date':
        text = get_date(text)
        if not is_valid_date(text):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
            return
        if not is_current_year(text):
            await message.answer(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ {datetime.now().year} –≥–æ–¥—É.")
            return
        if not is_date_before(data.start_date, text):
            await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")
            return
        data.end_date = text
        await generate_certificate(message, data, state)
        user_data.pop(tg_id, None)
        return

    if text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(MenuState.waiting_for_input)
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        user_data.pop(tg_id, None)
        return


# –ë–õ–û–ö –ü–û–ú–û–©–ò
@router.callback_query(lambda c: c.data == "help")
async def start_help(callback: types.CallbackQuery, state: FSMContext):
    await handler_help(callback.message, state)


async def handler_help(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùì –ü–æ–º–æ—â—å\n\n"
        "üìå –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
        "‚Ä¢ üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É: –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.\n"
        "‚Ä¢ üíä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–æ–¥–±–æ—Ä –≤—Ä–∞—á–∞ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º.\n"
        "‚Ä¢ ü©∫ –ú–µ–¥ –∫–∞—Ä—Ç–∞: –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ üìÑ –°–ø—Ä–∞–≤–∫–∞: —Å–ø—Ä–∞–≤–∫–∏, –Ω–∞–ª–æ–≥–∏, –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π.\n\n"
        "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚è∞\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö üë§\n"
        "‚Ä¢ FAQ ‚ùì\n\n"
        "üîÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è:\n\n"
        "‚Ä¢ ¬´–ù–∞–∑–∞–¥¬ª ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é.\n"
        "‚Ä¢ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª ‚Äî –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º.\n"
        "üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @fliwoll\n\n"
        "–ö–Ω–æ–ø–∫–∏:\n\n"
        "‚Ä¢ üîô –ù–∞–∑–∞–¥\n"
        "‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_help_back_keyboard()
    )