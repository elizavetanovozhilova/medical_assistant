from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import get_main_menu, get_gender_keyboard
from db_handler.db import check_auth, register_user
from keyboards.reply import get_menu_reply_keyboard
from keyboards.inline import get_help_back_keyboard
from utils import get_user_data, get_last_appointment, get_doctor_data
from keyboards.inline import get_medcard_keyboard, get_recommendation_keyboard
from model import get_doctor


from docx import Document
from docx2pdf import convert
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile, user
from datetime import datetime
import os
import logging

router = Router()

OUTPUT_DIR = "output"
os.makedirs(OUTPUT_DIR, exist_ok=True)
logger = logging.getLogger(__name__)
user_data = {}

class CertificateData:
    def __init__(self):
        self.user_id = None
        self.full_name = None
        self.birth_date = None
        self.diagnosis = None
        self.start_date = None
        self.end_date = None
        self.doctor_id = None
        self.doctor_name = None
        self.clinic_name = "–†–∞–∑—É–º–µ–¥"
        self.waiting_for = None

class RegistrationStates(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_gender = State()
    waiting_for_birth_date = State()
    waiting_for_phone = State()

class RecommendationStates(StatesGroup):
    waiting_for_symptoms = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)

    if check_auth(user_id):
        await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_menu_reply_keyboard()
        )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=get_menu_reply_keyboard())
        await state.set_state(RegistrationStates.waiting_for_first_name)

@router.callback_query(lambda c: c.data == "reference")
async def start_certificate_process(callback: types.CallbackQuery):

    tg_id = str(callback.from_user.id)
    db_user = get_user_data(tg_id)

    if not db_user:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    data = CertificateData()
    data.user_id = db_user['user_id']
    data.full_name = f"{db_user['first_name']} {db_user['last_name']}"
    data.birth_date = db_user.get('birth_date')

    last_appointment = get_last_appointment(data.user_id)
    if last_appointment:
        data.doctor_id = last_appointment['doctor_id']
        doctor = get_doctor_data(data.doctor_id)
        if doctor:
            data.doctor_name = f"{doctor['first_name']} {doctor['last_name']}"

    user_data[tg_id] = data
    await ask_diagnosis(callback.message, data)

def is_valid_date(date_str: str) -> bool:
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False


def is_date_before(date_str1: str, date_str2: str) -> bool:
    try:
        d1 = datetime.strptime(date_str1, "%d.%m.%Y")
        d2 = datetime.strptime(date_str2, "%d.%m.%Y")
        return d1 <= d2
    except ValueError:
        return False


def is_current_year(date_str: str) -> bool:
    try:
        date = datetime.strptime(date_str, "%d.%m.%Y")
        return date.year == datetime.now().year
    except ValueError:
        return False

async def ask_diagnosis(message: types.Message, data: CertificateData):
    data.waiting_for = 'diagnosis'
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=txt)] for txt in ["–û–†–í–ò", "–ì—Ä–∏–ø–ø", "–ê–Ω–≥–∏–Ω–∞", "–î—Ä—É–≥–æ–µ"]] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )

async def generate_certificate(message: types.Message, data: CertificateData, state: FSMContext):

    tg_id = message.from_user.id
    docx_path = os.path.join(OUTPUT_DIR, f"certificate_{tg_id}.docx")
    pdf_path = os.path.join(OUTPUT_DIR, f"certificate_{tg_id}.pdf")

    doc = Document()
    doc.add_heading("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞", level=1)
    doc.add_paragraph(f"–í—ã–¥–∞–Ω–∞: {data.full_name}")
    doc.add_paragraph(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data.birth_date}")
    doc.add_paragraph(f"–î–∏–∞–≥–Ω–æ–∑: {data.diagnosis}")
    doc.add_paragraph(f"–ü–µ—Ä–∏–æ–¥ –±–æ–ª–µ–∑–Ω–∏: —Å {data.start_date} –ø–æ {data.end_date}")
    doc.add_paragraph("–°–ø—Ä–∞–≤–∫–∞ –≤—ã–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.")
    doc.add_paragraph(f"–í—Ä–∞—á: {data.doctor_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
    doc.add_paragraph(f"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ: {data.clinic_name}")
    doc.add_paragraph(f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {datetime.now().strftime('%d.%m.%Y')}")

    doc.save(docx_path)
    convert(docx_path, pdf_path)

    await message.answer("–í–∞—à–∞ —Å–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–∞!")
    await message.answer_document(FSInputFile(pdf_path))
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    os.remove(docx_path)
    os.remove(pdf_path)

    await state.clear()


@router.message(RegistrationStates.waiting_for_first_name)
async def process_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegistrationStates.waiting_for_last_name)

@router.message(RegistrationStates.waiting_for_last_name)
async def process_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=get_gender_keyboard())
    await state.set_state(RegistrationStates.waiting_for_gender)


@router.callback_query(RegistrationStates.waiting_for_gender)
async def process_gender(callback: types.CallbackQuery, state: FSMContext):
    gender = '–ú' if callback.data == 'gender_male' else '–ñ'
    await state.update_data(gender=gender)
    await callback.message.edit_text(f"–ü–æ–ª: {gender}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(RegistrationStates.waiting_for_birth_date)

@router.message(RegistrationStates.waiting_for_birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    birth_date = message.text.strip()

    if not is_valid_date(birth_date):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    await state.update_data(birth_date=birth_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RegistrationStates.waiting_for_phone)


@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user = message.from_user

    success = register_user(
        tg_id=str(user.id),
        username=user.username,
        first_name=user_data['first_name'],
        last_name=user_data['last_name'],
        gender=user_data['gender'],
        phone=message.text,
        birth_date=user_data['birth_date']
    )

    if success:
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=get_menu_reply_keyboard()
        )
        await message.answer("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    else:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


@router.callback_query(lambda c: c.data == "help")
async def process_help_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚ùì –ü–æ–º–æ—â—å\n\n"
        "üìå –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
        "‚Ä¢ üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É: –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.\n"
        "‚Ä¢ üíä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–æ–¥–±–æ—Ä –≤—Ä–∞—á–∞ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º.\n"
        "‚Ä¢ ü©∫ –ú–µ–¥ –∫–∞—Ä—Ç–∞: –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ üìÑ –°–ø—Ä–∞–≤–∫–∞: —Å–ø—Ä–∞–≤–∫–∏, –Ω–∞–ª–æ–≥–∏, –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π.\n\n"
        "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚è∞\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö üë§\n"
        "‚Ä¢ FAQ ‚ùì\n\n"
        "üîÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è:\n\n"
        "‚Ä¢ ¬´–ù–∞–∑–∞–¥¬ª ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é.\n"
        "‚Ä¢ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª ‚Äî –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º.\n"
        "üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @fliwoll\n\n"
        "–ö–Ω–æ–ø–∫–∏:\n\n"
        "‚Ä¢ üîô –ù–∞–∑–∞–¥\n"
        "‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_help_back_keyboard()
    )


@router.callback_query(lambda c: c.data == "main_menu")
async def process_main_menu(callback: types.CallbackQuery):
    await callback.message.answer(
        "üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@router.message(RecommendationStates.waiting_for_symptoms)
async def process_symptoms(message: types.Message, state: FSMContext):
    symptoms = message.text
    if not symptoms or not isinstance(symptoms, str):
        await message.answer("–û—à–∏–±–∫–∞: –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.")
        return

    doctor = get_doctor(symptoms)

    await state.update_data(predicted_doctor=doctor)


    await message.answer(
        f"–°–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º —Å–∏–º–ø—Ç–æ–º–∞–º: {symptoms}\n\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É: *{doctor}*.\n\n"
        "‚ùì –ñ–µ–ª–∞–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º?",
        reply_markup=get_recommendation_keyboard(),
        parse_mode="Markdown"
    )

    await state.clear()

@router.message(lambda msg: msg.text == "–ú–µ–Ω—é")
async def handle_menu_button(message: types.Message):
    await message.answer(
        "üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@router.message()
async def general_handler(message: types.Message, state: FSMContext):

    tg_id = str(message.from_user.id)

    if not check_auth(tg_id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        await state.set_state(RegistrationStates.waiting_for_first_name)
        return

    data = user_data.get(tg_id)
    if not data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return

    text = message.text.strip()

    if data.waiting_for == 'diagnosis':
        if text not in ["–û–†–í–ò", "–ì—Ä–∏–ø–ø", "–ê–Ω–≥–∏–Ω–∞", "–î—Ä—É–≥–æ–µ"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        if text == "–î—Ä—É–≥–æ–µ":
            data.waiting_for = 'custom_diagnosis'
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–∏–∞–≥–Ω–æ–∑:", reply_markup=ReplyKeyboardRemove())
        else:
            data.diagnosis = text
            data.waiting_for = 'start_date'
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–∑–Ω–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardRemove())
        return

    if data.waiting_for == 'custom_diagnosis':
        data.diagnosis = text
        data.waiting_for = 'start_date'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–∑–Ω–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return

    if data.waiting_for == 'start_date':
        if not is_valid_date(text):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
            return
        if not is_current_year(text):
            await message.answer(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ {datetime.now().year} –≥–æ–¥—É.")
            return
        data.start_date = text
        data.waiting_for = 'end_date'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–∑–Ω–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardRemove())
        return

    if data.waiting_for == 'end_date':
        if not is_valid_date(text):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
            return
        if not is_current_year(text):
            await message.answer(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ {datetime.now().year} –≥–æ–¥—É.")
            return
        if not is_date_before(data.start_date, text):
            await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")
            return
        data.end_date = text
        await generate_certificate(message, data, state)
        await message.answer('–í–∞—à–∞ —Å–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–∞!')
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

@router.callback_query(lambda c: c.data == "medical_card")
async def process_help_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",
        reply_markup=get_medcard_keyboard()
    )

@router.callback_query(lambda c: c.data == "medcard_profile")
async def handle_medcard_profile(callback: types.CallbackQuery):
    tg_id = callback.from_user.id
    user = get_user_data(tg_id)
    if not user:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"–ò–º—è: {user['first_name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {user['last_name']}\n"
        f"–ü–æ–ª: {user['gender']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('birth_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
    )
    await callback.message.answer(text)

@router.callback_query(lambda c: c.data == "medcard_appointments")
async def handle_medcard_appointments(callback: types.CallbackQuery):
    tg_id = str(callback.from_user.id)
    appointments = get_last_appointment(tg_id)

    if not appointments:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏—ë–º–∞—Ö.")
        return

    text = (
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏—ë–º:\n\n"
        f"–î–∞—Ç–∞: {appointments['date']}\n"
        f"–î–æ–∫—Ç–æ—Ä: {appointments['doctor_name']}"
    )
    await callback.message.answer(text)

@router.callback_query(lambda c: c.data == "medcard_diagnoses")
async def handle_medcard_diagnoses(callback: types.CallbackQuery):
    tg_id = str(callback.from_user.id)
    # –ó–∞–≥–ª—É—à–∫–∞ ‚Äì –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å get_user_diagnoses(tg_id)
    diagnoses = ["–û–†–í–ò - 10.03.2024", "–ì—Ä–∏–ø–ø - 02.01.2025"]

    if not diagnoses:
        await callback.message.answer("–î–∏–∞–≥–Ω–æ–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = "üíä –í–∞—à–∏ –¥–∏–∞–≥–Ω–æ–∑—ã:\n\n" + "\n".join(diagnoses)
    await callback.message.answer(text)

@router.callback_query(lambda c: c.data == "recommendation")
async def ask_for_symptoms(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã:")
    await state.set_state(RecommendationStates.waiting_for_symptoms)


@router.callback_query(lambda c: c.data == "appointment")
async def appointment_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìÖ –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º –≤–∞—Å –Ω–∞ –ø—Ä–∏—ë–º. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É:")
